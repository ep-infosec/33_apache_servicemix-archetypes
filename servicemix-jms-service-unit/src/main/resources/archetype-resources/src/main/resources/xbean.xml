<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by Apache ServiceMix Archetype -->
<beans xmlns:jms="http://servicemix.apache.org/jms/1.0"
       xmlns:replaceMe="http://servicemix.apache.org/replaceMe"
       xmlns:amq="http://activemq.apache.org/schema/core"
       xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
            http://servicemix.apache.org/jms/1.0 http://servicemix.apache.org/schema/servicemix-jms-@{components.version}.xsd
            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
            http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core-@{activemq.version}.xsd">
            
    <!-- 
        The ServiceMix JMS component integrates JMS in the JBI bus.
        It supports:
            - SOAP 1.1 and 1.2
            - MIME attachments
            - WS-Addressing
            - WSDL based or XBean based deployment
            - all MEPs as consumers or providers
        It uses Apache ActiveMQ internally.            
            
            http://servicemix.apache.org/servicemix-jms.html
    -->            
            
    <!-- BEGIN SNIPPET: jms-consumer -->
    <!-- 
        A JMS Consumer endpoint is a server side endpoint that will consume plain JMS requests and send them into the NMR to a given
        target endpoint, which is called the proxied endpoint.
        
        Attributes:
            service                             : the endpoint service name
            endpoint                            : the endpoint name
            interfaceName                       : the endpoint interface name
            targetService                       : the target endpoint service name
            targetEndpoint                      : the target endpoint name
            targetInterface                     : the target endpoint interface name
            targetUri                           : the target endpoint URI
            marshaler                           : implementation of JmsConsumerMarshaler to use
            synchronous                         : specifies if the consumer will block while waiting for a response
            destinationChooser                  : implementation of DestinationChoose, implements the logic for choosing among JMS destinations
            destinationResolver                 : implementation of DestinationResolver, implements the logic for converting strings into destination IDs
            pubSubDomain                        : specifies if the destination is a topic
            connectionFactory                   : the ConnectionFactory used to connect with the destination
            useMessageIdInResponse              : specifies if the request message's ID is used as the reply's correlation ID
            replyDestination                    : specifies the JMS destination for the reply
            replyDestinationName                : specifies the name of the JMS destination to use for the reply
            replyExplicitQosEnabled             : specifies if the QoS values specified for the endpoint are explicitly used when the reply is sent
            replyDeliveryMode                   : specifies the JMS delivery mode used for the reply
            replyPriority                       : specifies the JMS message priority of the reply
            replyTimeToLive                     : specifies the number of milliseconds the reply message is valid
            replyProperties                     : specifies custom properties to be placed in the reply's JMS header
            storeFactory                        : implementation of StoreFactory used to create the data store for state information
            store                               : implementation of Store used to store state information
            listenerType                        : specifies the type of Spring JMS message listener to use
            jms102                              : specifies if the consumer is to be use JMS 1.0.2
            transacted                          : specifies the type of transaction to wrap the message exchanges
            clientId                            : the JMS client ID for a shared Connection created and used by this listener
            destination                         : the destination used to receive messages
            destinationName                     : the name of the destination used to receive messages
            durableSubscriptionName             : the durable subscriber name
            exceptionListener                   : implementation of ExceptionListener used to notify in case of a JMSException thrown by the registered message listener or the invocation infrastructure
            messageSelector                     : the message selector string to use
            sessionAcknowledgeMode              : the acknowledgement mode that is used when creating a Session to send a message
            subscriptionDurable                 : specifies if the listener uses a durable subscription to listen from messages
            pubSubNoLocal                       : specifies if messages published by the listener's Connection are suppressed
            concurrentConsumers                 : the number of concurrent consumers created by the listener
            cacheLevel                          : the level of caching allowed by the listener
            receiveTimeout                      : the timeout for receiving a message in milliseconds
            recoveryInterval                    : the interval, in milliseconds, between attempts to receover after a failed listener set-up
            maxMessagesPerTask                  : the number of attempts to receive messages per task
            serverSessionFactory                : the ServerSessionFactory to use
    -->
    <jms:consumer service="replaceMe:serviceName"
                  endpoint="jms-consumer"
                  destinationName="my.queue"
                  connectionFactory="#connectionFactory"
                  concurrentConsumers="8" />
    <!-- END SNIPPET: jms-consumer -->         

    <!-- BEGIN SNIPPET: jms-soap-consumer -->
    <!-- 
        A JMS SOAP Consumer endpoint is a server side endpoint that will consume plain JMS+SOAP requests and send them into the NMR to a given
        target endpoint, which is called the proxied endpoint.
        
        Attributes:
            service                             : the endpoint service name
            endpoint                            : the endpoint name
            interfaceName                       : the endpoint interface name
            targetService                       : the target endpoint service name
            targetEndpoint                      : the target endpoint name
            targetInterface                     : the target endpoint interface name
            targetUri                           : the target endpoint URI
            marshaler                           : implementation of JmsConsumerMarshaler to use
            synchronous                         : specifies if the consumer will block while waiting for a response
            destinationChooser                  : implementation of DestinationChoose, implements the logic for choosing among JMS destinations
            destinationResolver                 : implementation of DestinationResolver, implements the logic for converting strings into destination IDs
            pubSubDomain                        : specifies if the destination is a topic
            connectionFactory                   : the ConnectionFactory used to connect with the destination
            useMessageIdInResponse              : specifies if the request message's ID is used as the reply's correlation ID
            replyDestination                    : specifies the JMS destination for the reply
            replyDestinationName                : specifies the name of the JMS destination to use for the reply
            replyExplicitQosEnabled             : specifies if the QoS values specified for the endpoint are explicitly used when the reply is sent
            replyDeliveryMode                   : specifies the JMS delivery mode used for the reply
            replyPriority                       : specifies the JMS message priority of the reply
            replyTimeToLive                     : specifies the number of milliseconds the reply message is valid
            replyProperties                     : specifies custom properties to be placed in the reply's JMS header
            storeFactory                        : implementation of StoreFactory used to create the data store for state information
            store                               : implementation of Store used to store state information
            listenerType                        : specifies the type of Spring JMS message listener to use
            jms102                              : specifies if the consumer is to be use JMS 1.0.2
            transacted                          : specifies the type of transaction to wrap the message exchanges
            clientId                            : the JMS client ID for a shared Connection created and used by this listener
            destination                         : the destination used to receive messages
            destinationName                     : the name of the destination used to receive messages
            durableSubscriptionName             : the durable subscriber name
            exceptionListener                   : implementation of ExceptionListener used to notify in case of a JMSException thrown by the registered message listener or the invocation infrastructure
            messageSelector                     : the message selector string to use
            sessionAcknowledgeMode              : the acknowledgement mode that is used when creating a Session to send a message
            subscriptionDurable                 : specifies if the listener uses a durable subscription to listen from messages
            pubSubNoLocal                       : specifies if messages published by the listener's Connection are suppressed
            concurrentConsumers                 : the number of concurrent consumers created by the listener
            cacheLevel                          : the level of caching allowed by the listener
            receiveTimeout                      : the timeout for receiving a message in milliseconds
            recoveryInterval                    : the interval, in milliseconds, between attempts to receover after a failed listener set-up
            maxMessagesPerTask                  : the number of attempts to receive messages per task
            serverSessionFactory                : the ServerSessionFactory to use
            wsdl                                : WSDL describing the service
            useJBIWrapper                       : specifies if the JBI wrapper is sent in the body of the message
            validateWsdl                        : checks WSI-BP compliance
            policies                            : a list of interceptors that will process the message
    -->
    <jms:soap-consumer wsdl="classpath:service.wsdl"
                       destinationName="my.queue"
                       connectionFactory="#connectionFactory"
                       concurrentConsumers="8" />
    <!-- END SNIPPET: jms-soap-consumer -->    
    
    <!-- BEGIN SNIPPET: jms-jca-consumer -->
    <!-- 
        A JMS JCA Consumer endpoint is a server side endpoint that will consume plain JMS requests and send them into the NMR to a given    
        target endpoint, which is called the proxied endpoint.
        
        Attributes:
            service                             : the endpoint service name
            endpoint                            : the endpoint name
            interfaceName                       : the endpoint interface name
            targetService                       : the target endpoint service name
            targetEndpoint                      : the target endpoint name
            targetInterface                     : the target endpoint interface name
            targetUri                           : the target endpoint URI
            marshaler                           : implementation of JmsConsumerMarshaler to use
            synchronous                         : specifies if the consumer will block while waiting for a response
            destinationChooser                  : implementation of DestinationChoose, implements the logic for choosing among JMS destinations
            destinationResolver                 : implementation of DestinationResolver, implements the logic for converting strings into destination IDs
            pubSubDomain                        : specifies if the destination is a topic
            connectionFactory                   : the ConnectionFactory used to connect with the destination
            useMessageIdInResponse              : specifies if the request message's ID is used as the reply's correlation ID
            replyDestination                    : specifies the JMS destination for the reply
            replyDestinationName                : specifies the name of the JMS destination to use for the reply
            replyExplicitQosEnabled             : specifies if the QoS values specified for the endpoint are explicitly used when the reply is sent
            replyDeliveryMode                   : specifies the JMS delivery mode used for the reply
            replyPriority                       : specifies the JMS message priority of the reply
            replyTimeToLive                     : specifies the number of milliseconds the reply message is valid
            replyProperties                     : specifies custom properties to be placed in the reply's JMS header
            storeFactory                        : implementation of StoreFactory used to create the data store for state information
            store                               : implementation of Store used to store state information
            listenerType                        : specifies the type of Spring JMS message listener to use
            jms102                              : specifies if the consumer is to be use JMS 1.0.2
            transacted                          : specifies the type of transaction to wrap the message exchanges
            clientId                            : the JMS client ID for a shared Connection created and used by this listener
            destination                         : the destination used to receive messages
            destinationName                     : the name of the destination used to receive messages
            durableSubscriptionName             : the durable subscriber name
            exceptionListener                   : implementation of ExceptionListener used to notify in case of a JMSException thrown by the registered message listener or the invocation infrastructure
            messageSelector                     : the message selector string to use
            sessionAcknowledgeMode              : the acknowledgement mode that is used when creating a Session to send a message
            subscriptionDurable                 : specifies if the listener uses a durable subscription to listen from messages
            pubSubNoLocal                       : specifies if messages published by the listener's Connection are suppressed
            concurrentConsumers                 : the number of concurrent consumers created by the listener
            cacheLevel                          : the level of caching allowed by the listener
            receiveTimeout                      : the timeout for receiving a message in milliseconds
            recoveryInterval                    : the interval, in milliseconds, between attempts to receover after a failed listener set-up
            maxMessagesPerTask                  : the number of attempts to receive messages per task
            serverSessionFactory                : the ServerSessionFactory to use
            resourceAdapter                     : the resource adapter used for the endpoint
            activationSpec                      : the activation information needed for the endpoint
            bootstrapContext                    : the bootstrap context used when starting the resource adapter
    -->
    <jms:jca-consumer service="replaceMe:serviceName"
                  endpoint="jms-jca-consumer"
                  destinationName="my.queue"
                  connectionFactory="#connectionFactory"
                  resourceAdapter="#ra"
                  activationSpec="#as" />
    <!-- END SNIPPET: jms-jca-consumer -->
    
    <!-- BEGIN SNIPPET: jms-provider -->
    <!-- 
        A JMS Provider endpoint is a client-side JBI endpoint which can receive requests from the NMR and send them to a given URL where the service is provided.
        
        Attributes:
            deliveryMode                        : the JMS delivery mode
            destinationName                     : the JNDI name of the destination used to send messages
            endpoint                            : the endpoint name of the proxied endpoint
            explicitQosEnabled                  : specifies if the JMS messages have the specified properties explicitly applied
            interfaceName                       : the endpoint interface name
            jms102                              : specifies if the consumer is to be use JMS 1.0.2
            messageIdEnabled                    : specifies if JMS message IDs are enabled
            messageTimeStampEnabled             : specifies if JMS messages are time stamped
            priority                            : specifies the JMS message priority
            pubSubDomain                        : specifies if the destination is a topic
            pubSubNoLocal                       : specifies if messages published by the listener's Connection are suppressed
            receiveTimeout                      : the timeout for receiving a message in milliseconds
            replyDestinationName                : the JNDI name of the destination used to receive messages
            service                             : the proxied endpoint service name
            stateless                           : specifies if the consumer retains state information about the message exchange while it is in process
            timeToLive                          : specifies the number of milliseconds the message is valid
            connectionFactory                   : the ConnectionFactory used to connect with the destination
            destination                         : the JMS destination used to send messages
            destinationChooser                  : implementation of DestinationChooser used to choose among JMS destinations
            destinationResolver                 : implementation of DestinationResolver used to convert strings into destination IDs
            marshaler                           : implementation of JmsProviderMarshaler used to marshal message
            replyDestination                    : the JMS destination to receive messages
            storeFactory                        : the factory class used to create the data store for state information
            store                               : the data store used to store state information 
    -->
    <jms:provider service="replaceMe:serviceName"
                  endpoint="jms-provider"
                  destinationName="my.queue"
                  connectionFactory="#connectionFactory"/>
    <!-- END SNIPPET: jms-provider -->   
    
    <!-- BEGIN SNIPPET: jms-soap-provider -->
    <!--
        A JMS SOAP Provider endpoint is a client-side JBI endpoint which can receive requests from the NMR and send them to a given URL where the service is provided.
        
        Attributes:
            deliveryMode                        : the JMS delivery mode
            destinationName                     : the JNDI name of the destination used to send messages
            endpoint                            : the endpoint name of the proxied endpoint
            explicitQosEnabled                  : specifies if the JMS messages have the specified properties explicitly applied
            interfaceName                       : the endpoint interface name
            jms102                              : specifies if the consumer is to be use JMS 1.0.2
            messageIdEnabled                    : specifies if JMS message IDs are enabled
            messageTimeStampEnabled             : specifies if JMS messages are time stamped
            priority                            : specifies the JMS message priority
            pubSubDomain                        : specifies if the destination is a topic
            pubSubNoLocal                       : specifies if messages published by the listener's Connection are suppressed
            receiveTimeout                      : the timeout for receiving a message in milliseconds
            replyDestinationName                : the JNDI name of the destination used to receive messages
            service                             : the proxied endpoint service name
            stateless                           : specifies if the consumer retains state information about the message exchange while it is in process
            timeToLive                          : specifies the number of milliseconds the message is valid
            connectionFactory                   : the ConnectionFactory used to connect with the destination
            destination                         : the JMS destination used to send messages
            destinationChooser                  : implementation of DestinationChooser used to choose among JMS destinations
            destinationResolver                 : implementation of DestinationResolver used to convert strings into destination IDs
            marshaler                           : implementation of JmsProviderMarshaler used to marshal message
            replyDestination                    : the JMS destination to receive messages
            storeFactory                        : the factory class used to create the data store for state information
            store                               : the data store used to store state information 
            wsdl                                : WSDL describing the service
            useJBIWrapper                       : specifies if the JBI wrapper is sent in the body of the message
            validateWsdl                        : checks WSI-BP compliance
            policies                            : a list of interceptors that will process the message
    -->
    <jms:soap-provider wsdl="classpath:service.wsdl"
                       destinationName="my.queue"
                       connectionFactory="#connectionFactory" />
    <!-- END SNIPPET: jms-soap-provider -->      
    
    <amq:connectionFactory id="connectionFactory" brokerURL="tcp://localhost:61616" />                       

    <!-- JMS ConnectionFactory from JNDI -
    <bean id="connectionFactory" class="org.springframework.jndi.JndiObjectFactoryBean">
      <property name="jndiName" value="ConnectionFactory" />
    </bean>
    -->    
            
</beans>
